#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct MemoryBlock {
    int id;
    int size;
    bool allocated;
};

void firstFit(vector<MemoryBlock> &memory, int size) {
    for (int i = 0; i < memory.size(); ++i) {
        if (!memory[i].allocated && memory[i].size >= size) {
            memory[i].allocated = true;
            cout << "Memory block allocated successfully. Block ID: " << memory[i].id << endl;
            return;
        }
    }
    cout << "No suitable memory block found for allocation." << endl;
}

void bestFit(vector<MemoryBlock> &memory, int size) {
    int minSize = INT_MAX;
    int index = -1;

    for (int i = 0; i < memory.size(); ++i) {
        if (!memory[i].allocated && memory[i].size >= size && memory[i].size < minSize) {
            minSize = memory[i].size;
            index = i;
        }
    }

    if (index != -1) {
        memory[index].allocated = true;
        cout << "Memory block allocated successfully. Block ID: " << memory[index].id << endl;
    } else {
        cout << "No suitable memory block found for allocation." << endl;
    }
}

void worstFit(vector<MemoryBlock> &memory, int size) {
    int maxSize = 0;
    int index = -1;

    for (int i = 0; i < memory.size(); ++i) {
        if (!memory[i].allocated && memory[i].size >= size && memory[i].size > maxSize) {
            maxSize = memory[i].size;
            index = i;
        }
    }

    if (index != -1) {
        memory[index].allocated = true;
        cout << "Memory block allocated successfully. Block ID: " << memory[index].id << endl;
    } else {
        cout << "No suitable memory block found for allocation." << endl;
    }
}

void deallocateMemory(vector<MemoryBlock> &memory, int blockId) {
    for (int i = 0; i < memory.size(); ++i) {
        if (memory[i].id == blockId && memory[i].allocated) {
            memory[i].allocated = false;
            cout << "Memory block deallocated successfully. Block ID: " << blockId << endl;
            return;
        }
    }
    cout << "Memory block not found or already deallocated." << endl;
}
